"""
Django settings for school_inquiry_system project.

Generated by 'django-admin startproject' using Django 3.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
''' 
Path(__file__): Converts the file path into a Path object (from the pathlib module)

What .resolve() Does:
Returns the absolute path
If the path is relative, it converts it into an absolute path.
Resolves symbolic links (symlinks)
If the path includes symbolic links, it follows them and returns the real absolute path.
Removes redundant parts (. and ..)
It cleans up unnecessary relative references like . (current directory) and .. (parent directory).

p = Path("some_directory/some_file.txt")
print(p.resolve())  
# Outputs the absolute path, e.g., /home/user/project/some_directory/some_file.txt

# Example with symbolic links: A symbolic link (symlink) is a special type of file that acts as a pointer to another file or directory. It’s similar to a shortcut in Windows.
symlink_path = Path("/home/user/symlink_to_project")
print(symlink_path.resolve())  
# If symlink_to_project points to /home/user/real_project, it outputs:
# /home/user/real_project
'''
BASE_DIR = Path(__file__).resolve().parent.parent



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')    # Critical for cryptographic signing (e.g., session cookies, password hashing and verification, CSRF tokens).

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False') == 'True'

ALLOWED_HOSTS = ['dejawoo.site', 'www.dejawoo.site', '54.226.177.168', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    # django.contrib: essential core features provided by Django.
    'django.contrib.admin',     # Django's built-in admin panel
    'django.contrib.auth',  # Manages users, passwords, groups, permissions, and authentication.
    'django.contrib.contenttypes',  # useful when a model needs to relate to multiple different models dynamically.
    'django.contrib.sessions',  # Manages user sessions across requests via cookies and their storage in database/cache.
    'django.contrib.messages',  # Provides a temporary messaging system (flash messages). Often used for user notifications (e.g., success, error, warning messages).
    'django.contrib.staticfiles',   # Collects all static files from different apps into one directory.
    'inquiries',    # App created by you   
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',    # enforce browser to use https, prevents XSS attacks
    'django.contrib.sessions.middleware.SessionMiddleware', # Enables session management
    'django.middleware.common.CommonMiddleware',        # add trailing slash, blocks disallowed users, adds tags for caching
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # Enables temporary flash messages (success, warning, error messages).
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',   # prevents pages from being loaded inside iframes on other websites.
]

ROOT_URLCONF = 'school_inquiry_system.urls'     # Tells Django where to find the main URL configuration

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',   # specifying the template engine to use. You can either use Django or Jinja2. A template engine is a tool that allows you to generate dynamic HTML by inserting variables, logic, and reusable components into an HTML file.
        'DIRS': [BASE_DIR / 'templates'],   # Specifies custom directories where Django looks for templates that you will render in views !
        'APP_DIRS': True,   # If True, Django will automatically look for a templates/ folder inside each installed app. Usage: In views, you can load the template like this: return render(request, "myapp/dashboard.html"). If APP_DIRS = False, Django will not look inside apps for templates!
        'OPTIONS': {    # Inside OPTIONS, we define context processors, which automatically pass common data to all templates.
            'context_processors': [     # context_processors are functions that inject commonly used variables into every template automatically, without needing to pass them manually in each view.(e.g., request, user, messages) 
                'django.template.context_processors.debug', # Adds extra debugging information to templates. Works only if DEBUG = True in settings.py.
                'django.template.context_processors.request',   # adds request object to templates
                'django.contrib.auth.context_processors.auth',  # Adds user authentication info
                'django.contrib.messages.context_processors.messages',  # Enables flash messages
            ],
        },
    },
]

WSGI_APPLICATION = 'school_inquiry_system.wsgi.application' # Defines the WSGI application used for deploying Django (used by web servers like Gunicorn or uWSGI for serving project).


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv('ENGINE'),
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASS'),
        'HOST': os.getenv('HOST'),
        'PORT': os.getenv('PORT'),
    }
    
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [    # enhances password security by enforcing certain validation rules when users create or update their passwords.
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', # Prevents passwords that are too similar to the user’s personal information, such as: Username, First name, Last name, Email
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',   # Enforces a minimum length for passwords. By default, the minimum length is 8 characters.
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',  # Prevents users from using common, easily guessable passwords
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',     # Prevents passwords that are entirely numeric.
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True #  If False: Django will not support multiple languages.

USE_L10N = True # f True, Django formats dates/numbers based on LANGUAGE_CODE. If False, Django uses the default US English format.

USE_TZ = True   # If USE_TZ = False: Django does not store times in UTC. All times are stored in the local time zone (from TIME_ZONE).


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'     # This URL (/static/) will be prefixed to all static files you use in html temlate. You just have to mention the static file name inside the static folder !
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')     # Used in production to store all collected static files in one place. When running: python manage.py collectstatic Django will copy all static files into STATIC_ROOT.

STATICFILES_DIRS = [
    # os.path.join(BASE_DIR, "static"),  
    BASE_DIR / "static",  # Optional, tells Django where to look for additional static files in development. Django will search these directories when resolving {% static %} tags.
]

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587        # TLS
EMAIL_USE_TLS = True    # Enables encryption for email security
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')  # Your email address
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')  # Your email account's app-specific password


LOGIN_URL = '/inquiries/login/'     # The default login page URL
LOGIN_REDIRECT_URL = '/inquiries/dashboard/'     # Where users go after logging in. But do take care that Django automatically redirects users to the URL stored in the next parameter when they log in. If next is set, it will override LOGIN_REDIRECT_URL.
AUTHENTICATION_BACKENDS = ['inquiries.auth_backends.EmailBackend', 'django.contrib.auth.backends.ModelBackend'] 

''' defines how users are authenticated. It allows you to specify one or more authentication methods.

When a user logs in, Django checks AUTHENTICATION_BACKENDS to decide how to verify the user's identity.

If you don't specify this setting, Django will only use usernames for authentication (ModelBackend).
If you define multiple backends, Django will try them one by one.
'''

AUTH_USER_MODEL = 'inquiries.CustomUser'        # It means I don't want to use the default User model of Django, rather I want to use my own Cutom User model (where I can enforce unique constraint to the email of users which is not there in default User model)

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
